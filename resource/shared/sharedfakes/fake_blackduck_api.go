// Code generated by counterfeiter. DO NOT EDIT.
package sharedfakes

import (
	"sync"

	"github.com/elgohr/concourse-blackduck/shared"
)

type FakeBlackduckApi struct {
	GetProjectByNameStub        func(shared.Source) (*shared.Project, error)
	getProjectByNameMutex       sync.RWMutex
	getProjectByNameArgsForCall []struct {
		arg1 shared.Source
	}
	getProjectByNameReturns struct {
		result1 *shared.Project
		result2 error
	}
	getProjectByNameReturnsOnCall map[int]struct {
		result1 *shared.Project
		result2 error
	}
	GetProjectVersionsStub        func(shared.Source, *shared.Project) ([]shared.Version, error)
	getProjectVersionsMutex       sync.RWMutex
	getProjectVersionsArgsForCall []struct {
		arg1 shared.Source
		arg2 *shared.Project
	}
	getProjectVersionsReturns struct {
		result1 []shared.Version
		result2 error
	}
	getProjectVersionsReturnsOnCall map[int]struct {
		result1 []shared.Version
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlackduckApi) GetProjectByName(arg1 shared.Source) (*shared.Project, error) {
	fake.getProjectByNameMutex.Lock()
	ret, specificReturn := fake.getProjectByNameReturnsOnCall[len(fake.getProjectByNameArgsForCall)]
	fake.getProjectByNameArgsForCall = append(fake.getProjectByNameArgsForCall, struct {
		arg1 shared.Source
	}{arg1})
	stub := fake.GetProjectByNameStub
	fakeReturns := fake.getProjectByNameReturns
	fake.recordInvocation("GetProjectByName", []interface{}{arg1})
	fake.getProjectByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlackduckApi) GetProjectByNameCallCount() int {
	fake.getProjectByNameMutex.RLock()
	defer fake.getProjectByNameMutex.RUnlock()
	return len(fake.getProjectByNameArgsForCall)
}

func (fake *FakeBlackduckApi) GetProjectByNameCalls(stub func(shared.Source) (*shared.Project, error)) {
	fake.getProjectByNameMutex.Lock()
	defer fake.getProjectByNameMutex.Unlock()
	fake.GetProjectByNameStub = stub
}

func (fake *FakeBlackduckApi) GetProjectByNameArgsForCall(i int) shared.Source {
	fake.getProjectByNameMutex.RLock()
	defer fake.getProjectByNameMutex.RUnlock()
	argsForCall := fake.getProjectByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBlackduckApi) GetProjectByNameReturns(result1 *shared.Project, result2 error) {
	fake.getProjectByNameMutex.Lock()
	defer fake.getProjectByNameMutex.Unlock()
	fake.GetProjectByNameStub = nil
	fake.getProjectByNameReturns = struct {
		result1 *shared.Project
		result2 error
	}{result1, result2}
}

func (fake *FakeBlackduckApi) GetProjectByNameReturnsOnCall(i int, result1 *shared.Project, result2 error) {
	fake.getProjectByNameMutex.Lock()
	defer fake.getProjectByNameMutex.Unlock()
	fake.GetProjectByNameStub = nil
	if fake.getProjectByNameReturnsOnCall == nil {
		fake.getProjectByNameReturnsOnCall = make(map[int]struct {
			result1 *shared.Project
			result2 error
		})
	}
	fake.getProjectByNameReturnsOnCall[i] = struct {
		result1 *shared.Project
		result2 error
	}{result1, result2}
}

func (fake *FakeBlackduckApi) GetProjectVersions(arg1 shared.Source, arg2 *shared.Project) ([]shared.Version, error) {
	fake.getProjectVersionsMutex.Lock()
	ret, specificReturn := fake.getProjectVersionsReturnsOnCall[len(fake.getProjectVersionsArgsForCall)]
	fake.getProjectVersionsArgsForCall = append(fake.getProjectVersionsArgsForCall, struct {
		arg1 shared.Source
		arg2 *shared.Project
	}{arg1, arg2})
	stub := fake.GetProjectVersionsStub
	fakeReturns := fake.getProjectVersionsReturns
	fake.recordInvocation("GetProjectVersions", []interface{}{arg1, arg2})
	fake.getProjectVersionsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlackduckApi) GetProjectVersionsCallCount() int {
	fake.getProjectVersionsMutex.RLock()
	defer fake.getProjectVersionsMutex.RUnlock()
	return len(fake.getProjectVersionsArgsForCall)
}

func (fake *FakeBlackduckApi) GetProjectVersionsCalls(stub func(shared.Source, *shared.Project) ([]shared.Version, error)) {
	fake.getProjectVersionsMutex.Lock()
	defer fake.getProjectVersionsMutex.Unlock()
	fake.GetProjectVersionsStub = stub
}

func (fake *FakeBlackduckApi) GetProjectVersionsArgsForCall(i int) (shared.Source, *shared.Project) {
	fake.getProjectVersionsMutex.RLock()
	defer fake.getProjectVersionsMutex.RUnlock()
	argsForCall := fake.getProjectVersionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlackduckApi) GetProjectVersionsReturns(result1 []shared.Version, result2 error) {
	fake.getProjectVersionsMutex.Lock()
	defer fake.getProjectVersionsMutex.Unlock()
	fake.GetProjectVersionsStub = nil
	fake.getProjectVersionsReturns = struct {
		result1 []shared.Version
		result2 error
	}{result1, result2}
}

func (fake *FakeBlackduckApi) GetProjectVersionsReturnsOnCall(i int, result1 []shared.Version, result2 error) {
	fake.getProjectVersionsMutex.Lock()
	defer fake.getProjectVersionsMutex.Unlock()
	fake.GetProjectVersionsStub = nil
	if fake.getProjectVersionsReturnsOnCall == nil {
		fake.getProjectVersionsReturnsOnCall = make(map[int]struct {
			result1 []shared.Version
			result2 error
		})
	}
	fake.getProjectVersionsReturnsOnCall[i] = struct {
		result1 []shared.Version
		result2 error
	}{result1, result2}
}

func (fake *FakeBlackduckApi) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getProjectByNameMutex.RLock()
	defer fake.getProjectByNameMutex.RUnlock()
	fake.getProjectVersionsMutex.RLock()
	defer fake.getProjectVersionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBlackduckApi) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ shared.BlackduckApi = new(FakeBlackduckApi)
